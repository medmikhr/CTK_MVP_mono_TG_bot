#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç —Å –ø—Ä—è–º—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
"""

import os
import logging
from typing import List
from dotenv import load_dotenv
from langchain_gigachat import GigaChat
from langchain.agents import tool
from document_processor import search_documents
import time
import sys
import inspect

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
GC_AUTH = os.getenv('GIGACHAT_TOKEN')
if not GC_AUTH:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω GigaChat –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat
llm = GigaChat(
    credentials=GC_AUTH,
    model='GigaChat:latest',
    verify_ssl_certs=False,
    profanity_check=False
)

@tool
def dama_retrieve_tool(query: str):
    """–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏, 
    —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞—Ö DAMA, –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏, —Ä–æ–ª—è—Ö –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏.
    –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Data Management Body Of Knowledge (DMBOK)."""
    results = search_documents(query, "dama_dmbok", n_results=5)
    if not results:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ DAMA DMBOK."
    
    content_parts = []
    for i, result in enumerate(results, 1):
        source = result['metadata'].get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
        score = result['score']
        clean_text = result['text'].replace('\n', ' ').replace('  ', ' ').strip()
        content_parts.append(f"\n–ò—Å—Ç–æ—á–Ω–∏–∫ {i}: {source} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.3f})\n{clean_text}")
    
    return "\n\n---\n".join(content_parts)

@tool
def ctk_retrieve_tool(query: str):
    """–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏—è—Ö, 
    –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å–∏—Å—Ç–µ–º, –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞—Ö –∏ –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö –¶–¢–ö.
    –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¶–µ–Ω—Ç—Ä–∞ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–∞."""
    results = search_documents(query, "ctk_methodology", n_results=5)
    if not results:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞—Ö –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –¶–¢–ö."
    
    content_parts = []
    for i, result in enumerate(results, 1):
        source = result['metadata'].get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
        score = result['score']
        clean_text = result['text'].replace('\n', ' ').replace('  ', ' ').strip()
        content_parts.append(f"\n–ò—Å—Ç–æ—á–Ω–∏–∫ {i}: {source} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.3f})\n{clean_text}")
    
    return "\n\n---\n".join(content_parts)

@tool
def sbf_retrieve_tool(query: str):
    """–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, 
    —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π –°–ë–§. –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–º–µ—é—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏.
    –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –°–ë–§."""
    results = search_documents(query, "sbf_meta", n_results=5)
    if not results:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏ –°–±–µ—Ä–§–∞–∫—Ç–æ—Ä–∏–Ω–≥ (–°–ë–§)."
    
    content_parts = []
    for i, result in enumerate(results, 1):
        source = result['metadata'].get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
        score = result['score']
        clean_text = result['text'].replace('\n', ' ').replace('  ', ' ').strip()
        content_parts.append(f"\n–ò—Å—Ç–æ—á–Ω–∏–∫ {i}: {source} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.3f})\n{clean_text}")
    
    return "\n\n---\n".join(content_parts)

def get_functions_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö –¥–ª—è –±–æ—Ç–∞."""
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º @tool
    tool_functions = []
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
    current_module = inspect.currentframe().f_globals
    
    for name, obj in current_module.items():
        if inspect.isfunction(obj) and hasattr(obj, '__wrapped__') and hasattr(obj, 'name'):
            # –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º @tool
            tool_functions.append({
                "name": obj.name,
                "description": obj.__doc__ or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                "function": obj
            })
    
    return {
        "total_functions": len(tool_functions),
        "function_names": [func["name"] for func in tool_functions],
        "functions": [
            {
                "name": func["name"],
                "description": func["description"],
                "args_schema": getattr(func["function"], 'args_schema', None)
            }
            for func in tool_functions
        ]
    }

def call_agent(user_input: str) -> str:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ —Å –ø—Ä—è–º—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
    try:
        print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: '{user_input}'")
        print("=" * 50)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        tools_to_use = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        dama_keywords = ['dama', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏', '–º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã', 'dmbok']
        ctk_keywords = ['ctk', '—Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', '—Ä–æ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å', '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞', '–¶–¢–ö']
        sbf_keywords = ['sbf', '—Å–±–µ—Ä—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥', '—Å–±–µ—Ä–±–∞–Ω–∫ —Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥', '–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–±—Ñ', '–°–ë–§', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']
        
        user_input_lower = user_input.lower()
        
        if any(keyword in user_input_lower for keyword in dama_keywords):
            tools_to_use.append(("dama_retrieve_tool", dama_retrieve_tool))
        
        if any(keyword in user_input_lower for keyword in ctk_keywords):
            tools_to_use.append(("ctk_retrieve_tool", ctk_retrieve_tool))
        
        if any(keyword in user_input_lower for keyword in sbf_keywords):
            tools_to_use.append(("sbf_retrieve_tool", sbf_retrieve_tool))
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        if not tools_to_use:
            tools_to_use = [
                ("dama_retrieve_tool", dama_retrieve_tool),
                ("ctk_retrieve_tool", ctk_retrieve_tool),
                ("sbf_retrieve_tool", sbf_retrieve_tool)
            ]
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≤—Å–µ—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        collected_info = []
        
        for tool_name, tool_func in tools_to_use:
            print(f"\nüîß –ò—Å–ø–æ–ª—å–∑—É–µ–º {tool_name}...")
            try:
                result = tool_func.invoke(user_input)
                if result and len(result.strip()) > 0:
                    collected_info.append(f"=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ {tool_name} ===\n{result}")
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                else:
                    print(f"‚ö†Ô∏è  –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç {tool_name}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ {tool_name}: {e}")
        
        if not collected_info:
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ LLM
            response = llm.invoke(user_input)
            return response.content
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
        context = "\n\n".join(collected_info)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        prompt = f"""–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
{context}

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_input}

–û—Ç–≤–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞, —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º —á–µ—Å—Ç–Ω–æ."""
        
        print(f"\nü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM...")
        response = llm.invoke(prompt)
        
        return response.content
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ simple_agent_ask: {e}")
        
        # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        try:
            print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
            response = llm.invoke(user_input)
            return response.content
        except Exception as fallback_error:
            logger.error(f"–û—à–∏–±–∫–∞ fallback: {fallback_error}")
            return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

def test_simple_agent():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞...")
    print("=" * 50)
    
    test_queries = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏?",
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏—è—Ö",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥?"
    ]
    
    for i, query in enumerate(test_queries, 1):
        print(f"\nüîç –¢–µ—Å—Ç #{i}: '{query}'")
        print("-" * 30)
        
        start_time = time.time()
        try:
            result = call_agent(query)
            end_time = time.time()
            
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {end_time - start_time:.2f}—Å")
            print(f"üìù –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {result[:300]}...")
            
        except Exception as e:
            end_time = time.time()
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞ {end_time - start_time:.2f}—Å: {e}")

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ –∑–∞–ø—É—Å–∫–∞
    run_tests = "--test" in sys.argv
    
    if run_tests:
        test_simple_agent()
        exit(0)
    
    print("üöÄ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("–í–≤–µ–¥–∏—Ç–µ 'exit', 'quit' –∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    print("–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("=" * 50)
    
    try:
        while True:
            user_input = input("–°–ø—Ä–∞—à–∏–≤–∞–π: ")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ –≤—ã—Ö–æ–¥–∞
            if user_input.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥', 'q']:
                print("–í—ã—Ö–æ–¥ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                break
            
            result = call_agent(user_input)
            print(f"\nüí¨ –û—Ç–≤–µ—Ç:\n{result}")
            
    except KeyboardInterrupt:
        print("\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
        print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except EOFError:
        print("\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (EOF)")
        print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!") 