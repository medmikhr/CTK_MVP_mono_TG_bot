#!/usr/bin/env python3
"""
GigaChat Tool Calling Agent (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ–¥—Ö–æ–¥ –æ—Ç –°–±–µ—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
"""

import os
import time
import sys
from typing import Dict, Any
from dotenv import load_dotenv
from langchain_gigachat import GigaChat
from langchain_core.messages import HumanMessage, SystemMessage, FunctionMessage
from langchain.agents import create_tool_calling_agent, AgentExecutor
from langchain_core.prompts import ChatPromptTemplate
from pydantic import Field
from langchain_gigachat.tools.giga_tool import giga_tool

from document_processor import search_documents

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
gc_auth = os.getenv('GIGACHAT_TOKEN')
if not gc_auth:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω GigaChat –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

llm = GigaChat(
    credentials=gc_auth,
    model='GigaChat:latest',
    verify_ssl_certs=False,
    profanity_check=False
)

# Few-shot examples –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
few_shot_dama = [
    {
        "request": "–ß—Ç–æ —Ç–∞–∫–æ–µ DMBOK?",
        "params": {"query": "–ß—Ç–æ —Ç–∞–∫–æ–µ DMBOK?"}
    },
    {
        "request": "–ö–∞–∫–∏–µ –æ–±–ª–∞—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É DAMA?",
        "params": {"query": "–ö–∞–∫–∏–µ –æ–±–ª–∞—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É DAMA?"}
    }
]

few_shot_ctk = [
    {
        "request": "–ö–∞–∫–∏–µ –µ—Å—Ç—å —Å–ª–æ–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –¶–¢–ö?",
        "params": {"query": "–ö–∞–∫–∏–µ –µ—Å—Ç—å —Å–ª–æ–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –¶–¢–ö?"}
    },
    {
        "request": "–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –¶–¢–ö",
        "params": {"query": "–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –¶–¢–ö"}
    }
]

few_shot_sbf = [
    {
        "request": "–ö–∞–∫–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –°–±–µ—Ä–§–∞–∫—Ç–æ—Ä–∏–Ω–≥?",
        "params": {"query": "–ö–∞–∫–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –°–±–µ—Ä–§–∞–∫—Ç–æ—Ä–∏–Ω–≥?"}
    },
    {
        "request": "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö –°–±–µ—Ä–§–∞–∫—Ç–æ—Ä–∏–Ω–≥",
        "params": {"query": "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö –°–±–µ—Ä–§–∞–∫—Ç–æ—Ä–∏–Ω–≥"}
    }
]

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º giga_tool
@giga_tool(few_shot_examples=few_shot_dama)
def dama_search(query: str = Field(description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ DAMA DMBOK")) -> str:
    """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ DAMA DMBOK –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è: DAMA, DMBOK, dmbok, Data Management Body Of Knowledge, –æ–±–ª–∞—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏, —Ä–æ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏, —Å—Ç–∞–Ω–¥–∞—Ä—Ç DAMA."""
    result = search_documents_tool(query, "dama_dmbok", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ DAMA DMBOK")
    return result

@giga_tool(few_shot_examples=few_shot_ctk)
def ctk_search(query: str = Field(description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞—Ö –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –¶–¢–ö")) -> str:
    """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞—Ö –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –¶–¢–ö –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è: –¶–¢–ö, –¶–µ–Ω—Ç—Ä –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–∞, –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –¶–¢–ö, —Å–ª–æ–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã –¶–¢–ö, –ø–æ–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –î–ó–û."""
    result = search_documents_tool(query, "ctk_methodology", "—Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞—Ö –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –¶–¢–ö")
    return result

@giga_tool(few_shot_examples=few_shot_sbf)
def sbf_search(query: str = Field(description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏ –°–±–µ—Ä–§–∞–∫—Ç–æ—Ä–∏–Ω–≥ (–°–ë–§)")) -> str:
    """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏ –°–±–µ—Ä–§–∞–∫—Ç–æ—Ä–∏–Ω–≥ (–°–ë–§) –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è: –°–±–µ—Ä–§–∞–∫—Ç–æ—Ä–∏–Ω–≥, –°–ë–§, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –°–ë–§, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –°–±–µ—Ä–§–∞–∫—Ç–æ—Ä–∏–Ω–≥."""
    result = search_documents_tool(query, "sbf_meta", "—Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏ –°–±–µ—Ä–§–∞–∫—Ç–æ—Ä–∏–Ω–≥ (–°–ë–§)")
    return result

def search_documents_tool(query: str, collection: str, collection_name: str) -> str:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."""
    try:
        results = search_documents(query, collection, n_results=5)
        
        if not results:
            return f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {collection_name}."
        
        content_parts = []
        for i, result in enumerate(results, 1):
            source = result['metadata'].get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
            score = result['score']
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            clean_text = result['text'].replace('\n', ' ').replace('  ', ' ').strip()
            content_parts.append(f"\n–ò—Å—Ç–æ—á–Ω–∏–∫ {i}: {source} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.3f})\n{clean_text}")
        
        final_result = "\n\n---\n".join(content_parts)
        return final_result
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ {collection_name}: {str(e)}"

functions = [dama_search, ctk_search, sbf_search]

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
prompt = ChatPromptTemplate.from_messages([
    ("system", """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã–º–∏. –£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä—ë–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

**–ü–†–ê–í–ò–õ–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –§–£–ù–ö–¶–ò–ô:**

1. **dama_search** - –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ DAMA DMBOK
   - –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: DAMA, DMBOK, dmbok, Data Management Body Of Knowledge, –æ–±–ª–∞—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏, —Ä–æ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏, —Å—Ç–∞–Ω–¥–∞—Ä—Ç DAMA
   - –ü—Ä–∏–º–µ—Ä—ã: "–ß—Ç–æ —Ç–∞–∫–æ–µ DMBOK?", "–ö–∞–∫–∏–µ –æ–±–ª–∞—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É dmbok"

2. **ctk_search** - –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –¶–¢–ö
   - –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: –¶–¢–ö, –¶–µ–Ω—Ç—Ä –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–∞, –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –¶–¢–ö, —Å–ª–æ–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã –¶–¢–ö, –ø–æ–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –î–ó–û
   - –ü—Ä–∏–º–µ—Ä—ã: "–ö–∞–∫–∏–µ –µ—Å—Ç—å —Å–ª–æ–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –¶–¢–ö", "–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –¶–¢–ö"

3. **sbf_search** - –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –°–±–µ—Ä–§–∞–∫—Ç–æ—Ä–∏–Ω–≥
   - –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: –°–±–µ—Ä–§–∞–∫—Ç–æ—Ä–∏–Ω–≥, –°–ë–§, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –°–ë–§, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –°–±–µ—Ä–§–∞–∫—Ç–æ—Ä–∏–Ω–≥
   - –ü—Ä–∏–º–µ—Ä—ã: "–ö–∞–∫–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –°–±–µ—Ä–§–∞–∫—Ç–æ—Ä–∏–Ω–≥?"

**–í–ê–ñ–ù–û:** –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å –ª—é–±–æ–µ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é. –ù–ï –û–¢–í–ï–ß–ê–ô –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏–π.

–í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."""),
    ("placeholder", "{chat_history}"),
    ("human", "{input}"),
    ("placeholder", "{agent_scratchpad}"),
])

# –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å create_tool_calling_agent
agent = create_tool_calling_agent(llm, functions, prompt)
agent_executor = AgentExecutor(
    agent=agent, 
    tools=functions,
    return_intermediate_steps=True,
    verbose=True
)

def call_agent(user_query: str, thread_id: str = "default") -> str:
    try:
        result = agent_executor.invoke({
            "input": user_query,
            "chat_history": []
        })
        
        response = result.get("output", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –≤—ã–∑–≤–∞–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        if "intermediate_steps" in result and result["intermediate_steps"]:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
            used_tools = []
            for step in result["intermediate_steps"]:
                if len(step) >= 2:
                    tool_name = step[0].tool
                    used_tools.append(tool_name)
            
            if used_tools:
                unique_tools = list(set(used_tools))
                tools_info = f"\n\nüîç **–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:** {', '.join(unique_tools)}"
                return response + tools_info
        
        # –ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã
        tools_info = "\n\nüí° **–û—Ç–≤–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö** (–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)"
        return response + tools_info
        
    except Exception as e:
        return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

def get_functions_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –¥–ª—è –±–æ—Ç–∞."""
    return {
        "total_functions": len(functions),
        "function_names": [func.name for func in functions],
        "functions": [
            {
                "name": func.name,
                "description": func.description,
                "args_schema": func.args_schema.schema() if hasattr(func, 'args_schema') else None
            }
            for func in functions
        ]
    }

def main():
    try:
        while True:
            try:
                user_input = input("\n–°–ø—Ä–∞—à–∏–≤–∞–π: ")
                if user_input.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥', 'q']:
                    break
                if not user_input.strip():
                    continue
                print(f"üë§ User: {user_input}")
                start_time = time.time()
                bot_answer = call_agent(user_input, thread_id="main_thread")
                end_time = time.time()
                print(f"\nüí¨ Bot (–∑–∞ {end_time - start_time:.2f}—Å):")
                print(f"\033[93m{bot_answer}\033[0m")
            except KeyboardInterrupt:
                break
            except EOFError:
                break
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 
    