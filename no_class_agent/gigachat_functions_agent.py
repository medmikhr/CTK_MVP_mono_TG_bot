#!/usr/bin/env python3
"""
GigaChat Functions Agent (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ–¥—Ö–æ–¥ –æ—Ç –°–±–µ—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
"""

import os
import logging
from typing import Dict, Any
from dotenv import load_dotenv
from langchain_gigachat import GigaChat
from langchain_core.messages import HumanMessage, SystemMessage, FunctionMessage
from langgraph.prebuilt import create_react_agent
from pydantic import Field
from langchain_gigachat.tools.giga_tool import giga_tool
import time
import sys

from document_processor import search_documents

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
gc_auth = os.getenv('GIGACHAT_TOKEN')
if not gc_auth:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω GigaChat –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

llm = GigaChat(
    credentials=gc_auth,
    model='GigaChat:latest',
    verify_ssl_certs=False,
    profanity_check=False
)
logger.info("GigaChat LLM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º giga_tool
dama_few_shot_examples = [
    {"request": "–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ DAMA DMBOK", "params": {"query": "–º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç DAMA DMBOK", "collection": "dama_dmbok"}},
    {"request": "–ß—Ç–æ —Ç–∞–∫–æ–µ DAMA DMBOK?", "params": {"query": "DAMA DMBOK Data Management Body Of Knowledge —Å—Ç–∞–Ω–¥–∞—Ä—Ç", "collection": "dama_dmbok"}},
    {"request": "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ä–æ–ª—è—Ö –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É DAMA DMBOK", "params": {"query": "—Ä–æ–ª–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç DAMA DMBOK", "collection": "dama_dmbok"}}
]

ctk_few_shot_examples = [
    {"request": "–ù–∞–π–¥–∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã –ø–æ –ø—Ä–æ—Ü–µ—Å—Å–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏", "params": {"query": "—Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏", "collection": "ctk_methodology"}},
    {"request": "–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ–ª–∏—Ç–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –î–ó–û", "params": {"query": "–ø–æ–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—á–µ—Ä–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º—ã–µ –æ–±—â–µ—Å—Ç–≤–∞ –î–ó–û", "collection": "ctk_methodology"}},
    {"request": "–ß—Ç–æ —Ç–∞–∫–æ–µ –¶–¢–ö –∏ –∫–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç?", "params": {"query": "–¶–¢–ö —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", "collection": "ctk_methodology"}}
]

@giga_tool(few_shot_examples=dama_few_shot_examples)
def dama_search(query: str = Field(description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ DAMA DMBOK")) -> str:
    return search_documents_tool(query, "dama_dmbok", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ DAMA DMBOK")

@giga_tool(few_shot_examples=ctk_few_shot_examples)
def ctk_search(query: str = Field(description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞—Ö –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –¶–¢–ö")) -> str:
    return search_documents_tool(query, "ctk_methodology", "—Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞—Ö –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –¶–¢–ö")

def search_documents_tool(query: str, collection: str, collection_name: str) -> str:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."""
    try:
        logger.info(f"–ü–æ–∏—Å–∫ –≤ {collection_name}: {query}")
        results = search_documents(query, collection, n_results=5)
        if not results:
            return f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {collection_name}."
        content_parts = []
        for i, result in enumerate(results, 1):
            source = result['metadata'].get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
            score = result['score']
            content_parts.append(f"–ò—Å—Ç–æ—á–Ω–∏–∫ {i}: {source} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.3f})\n{result['text']}")
        return "\n\n---\n\n".join(content_parts)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ {collection_name}: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ {collection_name}: {str(e)}"

functions = [dama_search, ctk_search]
logger.info("–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è GigaChat –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

agent = create_react_agent(
    model=llm,
    tools=functions
)
logger.info("–ê–≥–µ–Ω—Ç —Å create_react_agent –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

def call_agent(query: str, user_id: str = "default") -> Dict[str, Any]:
    start_time = time.time()
    try:
        response = process_query(query, thread_id=user_id)
        end_time = time.time()
        processing_time = end_time - start_time
        return {
            "success": True,
            "response": response,
            "processing_time": processing_time,
            "thread_id": user_id
        }
    except Exception as e:
        end_time = time.time()
        processing_time = end_time - start_time
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
        logger.error(error_msg)
        return {
            "success": False,
            "response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "error": error_msg,
            "processing_time": processing_time,
            "thread_id": user_id
        }

def process_query(user_query: str, thread_id: str = "default") -> str:
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {user_query}")
        messages = [
            SystemMessage(content="""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã–º–∏. –£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–≤—É–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
1. **–°—Ç–∞–Ω–¥–∞—Ä—Ç DAMA DMBOK** (Data Management Body Of Knowledge) - –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é dama_search –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞—Ö DAMA, –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏, —Ä–æ–ª—è—Ö –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É DAMA DMBOK.
2. **–†–µ–≥–ª–∞–º–µ–Ω—Ç—ã –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¶–¢–ö** - –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é ctk_search –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞—Ö –ø–æ –ø—Ä–æ—Ü–µ—Å—Å–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏, –ø–æ–ª–∏—Ç–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –î–ó–û (–¥–æ—á–µ—Ä–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º—ã—Ö –æ–±—â–µ—Å—Ç–≤), –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è—Ö –∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç –¶–µ–Ω—Ç—Ä–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–∞ (–¶–¢–ö).
**–í–ê–ñ–ù–û**: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –¶–¢–ö, —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞—Ö –¶–¢–ö, –ø–æ–ª–∏—Ç–∏–∫–∞—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –î–ó–û, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –ø–æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –¶–¢–ö - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é ctk_search.
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ DAMA DMBOK, –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ DAMA, –æ–±–ª–∞—Å—Ç—è—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –ø–æ DAMA - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é dama_search.
–í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""),
            HumanMessage(content=user_query)
        ]
        used_tools = []
        tools_were_called = False
        while True:
            response = agent.invoke({"messages": messages}, config={"configurable": {"thread_id": thread_id}})
            if "tool_calls" in response and response["tool_calls"]:
                tools_were_called = True
                for tool_call in response["tool_calls"]:
                    func_name = tool_call["name"]
                    args = tool_call["args"]
                    logger.info(f"–í—ã–ø–æ–ª–Ω—è—é —Ñ—É–Ω–∫—Ü–∏—é {func_name} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ {args}")
                    if func_name == "dama_search":
                        used_tools.append("–°—Ç–∞–Ω–¥–∞—Ä—Ç DAMA DMBOK")
                        result = dama_search.invoke(args)
                    elif func_name == "ctk_search":
                        used_tools.append("–†–µ–≥–ª–∞–º–µ–Ω—Ç—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¶–¢–ö")
                        result = ctk_search.invoke(args)
                    else:
                        result = None
                    messages.append(FunctionMessage(name=func_name, content=result))
            else:
                bot_answer = response["messages"][-1].content
                logger.info("–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                if tools_were_called and used_tools:
                    unique_tools = list(set(used_tools))
                    tools_info = f"\n\nüîç **–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:** {', '.join(unique_tools)}"
                    return bot_answer + tools_info
                else:
                    tools_info = "\n\nüí° **–û—Ç–≤–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö** (–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)"
                    return bot_answer + tools_info
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        try:
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback - –∑–∞–ø—Ä–æ—Å –∫ LLM —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏")
            llm_with_functions = llm.bind_tools(functions)
            response = llm_with_functions.invoke(messages)
            return response.content + "\n\n‚ö†Ô∏è **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback —Ä–µ–∂–∏–º** (–≤–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)"
        except Exception as fallback_error:
            logger.error(f"–û—à–∏–±–∫–∞ fallback: {fallback_error}")
            try:
                response = llm.invoke(messages)
                return response.content + "\n\n‚ö†Ô∏è **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º** (–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)"
            except Exception as final_error:
                logger.error(f"–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ fallback: {final_error}")
                return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

def get_functions_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –¥–ª—è –±–æ—Ç–∞."""
    return {
        "total_functions": len(functions),
        "function_names": [func.name for func in functions],
        "functions": [
            {
                "name": func.name,
                "description": func.description,
                "args_schema": func.args_schema.schema() if hasattr(func, 'args_schema') else None
            }
            for func in functions
        ]
    }

def main():
    try:
        print("üöÄ GigaChat Functions Agent –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("–í–≤–µ–¥–∏—Ç–µ 'exit', 'quit' –∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        print("=" * 50)
        while True:
            try:
                user_input = input("\n–°–ø—Ä–∞—à–∏–≤–∞–π: ")
                if user_input.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥', 'q']:
                    print("–í—ã—Ö–æ–¥ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    break
                if not user_input.strip():
                    continue
                print(f"User: {user_input}")
                start_time = time.time()
                bot_answer = process_query(user_input, thread_id="main_thread")
                end_time = time.time()
                print(f"\nüí¨ Bot (–∑–∞ {end_time - start_time:.2f}—Å):")
                print(f"\033[93m{bot_answer}\033[0m")
            except KeyboardInterrupt:
                print("\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
                break
            except EOFError:
                print("\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (EOF)")
                break
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 