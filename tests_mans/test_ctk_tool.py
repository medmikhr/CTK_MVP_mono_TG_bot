#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ctk_retrieve_tool
"""

import time
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_ctk_tool_direct():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ctk_retrieve_tool –Ω–∞–ø—Ä—è–º—É—é."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ctk_retrieve_tool –Ω–∞–ø—Ä—è–º—É—é")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        from old_react_agent import ctk_retrieve_tool, vector_stores
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        ctk_store = vector_stores["ctk"]
        count = ctk_store._collection.count()
        print(f"–•—Ä–∞–Ω–∏–ª–∏—â–µ CTK: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        if count == 0:
            print("‚ùå –•—Ä–∞–Ω–∏–ª–∏—â–µ CTK –ø—É—Å—Ç–æ–µ")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        test_queries = [
            "—Å–ª–æ–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
            "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è",
            "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º"
        ]
        
        for i, query in enumerate(test_queries, 1):
            print(f"\nüîç –¢–µ—Å—Ç #{i}: '{query}'")
            print("-" * 30)
            
            start_time = time.time()
            
            try:
                result = ctk_retrieve_tool.invoke(query)
                end_time = time.time()
                
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {end_time - start_time:.2f}—Å")
                print(f"üìÑ –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result).__name__}")
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if hasattr(result, 'content'):
                    print(f"üìù –ö–æ–Ω—Ç–µ–Ω—Ç: {result.content[:300]}...")
                elif isinstance(result, str):
                    print(f"üìù –°—Ç—Ä–æ–∫–∞: {result[:300]}...")
                elif isinstance(result, tuple):
                    print(f"üìù –ö–æ—Ä—Ç–µ–∂: {len(result)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    for j, item in enumerate(result):
                        print(f"   –≠–ª–µ–º–µ–Ω—Ç {j+1}: {str(item)[:100]}...")
                else:
                    print(f"üìù –û–±—ä–µ–∫—Ç: {str(result)[:300]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                if hasattr(result, 'metadata'):
                    print(f"üè∑Ô∏è  –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {result.metadata}")
                if hasattr(result, 'additional_kwargs'):
                    additional = result.additional_kwargs
                    if additional:
                        print(f"üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {additional}")
                
            except Exception as e:
                end_time = time.time()
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞ {end_time - start_time:.2f}—Å: {e}")
                print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        return False

def test_ctk_tool_via_agent():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ctk_retrieve_tool —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ctk_retrieve_tool —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞")
    print("=" * 50)
    
    try:
        from old_react_agent import agent_executor
        
        test_queries = [
            "–ò—Å–ø–æ–ª—å–∑—É–π ctk_retrieve_tool –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–æ—è—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
            "–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏—è—Ö –∏—Å–ø–æ–ª—å–∑—É—è ctk_retrieve_tool"
        ]
        
        for query in test_queries:
            print(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: '{query}'")
            print("-" * 50)
            
            start_time = time.time()
            config = {"configurable": {"thread_id": "test_ctk"}}
            
            try:
                event_count = 0
                for event in agent_executor.stream(
                    {"messages": [{"role": "user", "content": query}]},
                    stream_mode="values",
                    config=config,
                ):
                    event_count += 1
                    print(f"\nüìã –°–æ–±—ã—Ç–∏–µ #{event_count}:")
                    
                    # –í—ã–≤–æ–¥–∏–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
                    if "messages" in event:
                        messages = event["messages"]
                        if messages:
                            last_message = messages[-1]
                            print(f"   –¢–∏–ø: {type(last_message).__name__}")
                            
                            # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–≥–µ–Ω—Ç–∞
                            if hasattr(last_message, 'content'):
                                print(f"   –ö–æ–Ω—Ç–µ–Ω—Ç: {last_message.content[:200]}...")
                            
                            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                            if hasattr(last_message, 'additional_kwargs'):
                                additional = last_message.additional_kwargs
                                if additional:
                                    print(f"   –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {additional}")
                    
                    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∫–ª—é—á–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    print(f"   –ö–ª—é—á–∏ —Å–æ–±—ã—Ç–∏—è: {list(event.keys())}")
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å tool_calls
                    if "tool_calls" in event:
                        tool_calls = event["tool_calls"]
                        print(f"   üîß –í—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tool_calls)}")
                        for i, tool_call in enumerate(tool_calls):
                            print(f"      –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {i+1}: {tool_call}")
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å tool_results
                    if "tool_results" in event:
                        tool_results = event["tool_results"]
                        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tool_results)}")
                        for i, result in enumerate(tool_results):
                            print(f"      –†–µ–∑—É–ª—å—Ç–∞—Ç {i+1}: {str(result)[:200]}...")
                
                end_time = time.time()
                print(f"\n‚úÖ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {event_count}")
                print(f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {end_time - start_time:.2f}—Å")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
                print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    import sys
    
    verbose = "--verbose" in sys.argv or "-v" in sys.argv
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ctk_retrieve_tool")
    if verbose:
        print("üìã –†–µ–∂–∏–º –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤–∫–ª—é—á–µ–Ω")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –Ω–∞–ø—Ä—è–º—É—é
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞...")
    direct_success = test_ctk_tool_direct()
    
    # –¢–µ—Å—Ç —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞...")
    agent_success = test_ctk_tool_via_agent()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    
    print(f"–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ ctk_retrieve_tool: {'‚úÖ' if direct_success else '‚ùå'}")
    print(f"–í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞: {'‚úÖ' if agent_success else '‚ùå'}")
    
    if direct_success and agent_success:
        print("\n‚úÖ ctk_retrieve_tool —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("   –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    elif direct_success and not agent_success:
        print("\n‚ö†Ô∏è  ctk_retrieve_tool —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≥–µ–Ω—Ç–æ–º")
        print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å GigaChat API –ø—Ä–∏ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö")
        print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å LangGraph –∞–≥–µ–Ω—Ç–æ–º")
        print("   - –û—à–∏–±–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    elif not direct_success:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å ctk_retrieve_tool")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
        print("2. –†–∞–±–æ—Ç–∞—é—Ç –ª–∏ embeddings")
        print("3. –°–æ—Å—Ç–æ—è–Ω–∏–µ ChromaDB")
        print("4. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤ –≤ PERSIST_DIR")
    
    print(f"\nüí° –î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python test_ctk_tool.py --verbose")

if __name__ == "__main__":
    main() 