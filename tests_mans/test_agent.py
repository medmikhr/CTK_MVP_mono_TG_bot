#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è GigaChat Functions Agent
"""

import os
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_agent_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞...")
    
    try:
        from class_functions_agent import GigaChatFunctionsAgent
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
        if not os.getenv('GIGACHAT_TOKEN'):
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω GigaChat –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = GigaChatFunctionsAgent()
        print("‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â
        store_info = agent.get_store_info()
        print("\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â:")
        for store_name, info in store_info.items():
            if "error" not in info:
                status_icon = "‚úÖ" if info["status"] == "ready" else "‚ö†Ô∏è"
                print(f"   {status_icon} {store_name}: {info['documents']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            else:
                print(f"   ‚ùå {store_name}: –æ—à–∏–±–∫–∞ - {info['error']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        functions_info = agent.get_functions_info()
        print(f"\nüîß –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {functions_info['total_functions']}")
        for func_info in functions_info['functions']:
            print(f"   - {func_info['name']}: {func_info['description'][:50]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞: {e}")
        return False

def test_function_calls():
    """–¢–µ—Å—Ç –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π...")
    
    try:
        from class_functions_agent import GigaChatFunctionsAgent
        
        agent = GigaChatFunctionsAgent()
        
        # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ DAMA –ø–æ–∏—Å–∫–∞
        print("üìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DAMA –ø–æ–∏—Å–∫–∞...")
        dama_result = agent.dama_search_func("–º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(dama_result.content)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(dama_result.sources)}")
        
        # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¶–¢–ö –ø–æ–∏—Å–∫–∞
        print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¶–¢–ö –ø–æ–∏—Å–∫–∞...")
        ctk_result = agent.ctk_search_func("—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(ctk_result.content)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(ctk_result.sources)}")
        
        print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        return False

def test_agent_queries():
    """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –∞–≥–µ–Ω—Ç—É."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –∞–≥–µ–Ω—Ç—É...")
    
    try:
        from class_functions_agent import GigaChatFunctionsAgent
        
        agent = GigaChatFunctionsAgent()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_queries = [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ DMBOK?",
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏",
            "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¶–¢–ö?",
            "–°—Ä–∞–≤–Ω–∏ –ø–æ–¥—Ö–æ–¥—ã DAMA –∏ –¶–¢–ö"
        ]
        
        for i, query in enumerate(test_queries, 1):
            print(f"\nüìù –¢–µ—Å—Ç {i}: {query}")
            try:
                response = agent.process_query(query)
                print(f"   –û—Ç–≤–µ—Ç: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   –ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞: {response[:100]}...")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print("‚úÖ –ó–∞–ø—Ä–æ—Å—ã –∫ –∞–≥–µ–Ω—Ç—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ GigaChat Functions Agent")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    try:
        import langchain_gigachat
        import langgraph
        import langchain_core
        import pydantic
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        test_agent_initialization,
        test_function_calls,
        test_agent_queries
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 