#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç GigaChat embeddings –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
"""

import os
import sys
import argparse
import logging
from typing import List
from document_processor_gigachat import (
    process_documents_from_folder,
    get_folder_info,
    test_embeddings,
    get_document_info
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def format_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
    if size_bytes == 0:
        return "0B"
    size_names = ["B", "KB", "MB", "GB"]
    import math
    i = int(math.floor(math.log(size_bytes, 1024)))
    p = math.pow(1024, i)
    s = round(size_bytes / p, 2)
    return f"{s} {size_names[i]}"

def print_folder_info(folder_info: dict):
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–ø–∫–µ."""
    if "error" in folder_info:
        print(f"‚ùå –û—à–∏–±–∫–∞: {folder_info['error']}")
        return
    
    print(f"\nüìÅ –ü–∞–ø–∫–∞: {folder_info['folder_path']}")
    print(f"üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {folder_info['total_files']}")
    print(f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {format_size(folder_info['total_size'])}")
    print(f"üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(folder_info['supported_extensions'])}")
    
    if folder_info['files']:
        print("\nüìÑ –§–∞–π–ª—ã:")
        for file_info in folder_info['files']:
            print(f"   ‚Ä¢ {file_info['name']} ({format_size(file_info['size'])})")

def print_upload_result(result: dict):
    """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏."""
    if not result.get("success", False):
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        return
    
    print(f"\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {result['total_files']}")
    print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result['processed']}")
    print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {result['failed']}")
    print(f"   ‚Ä¢ –ö–æ–ª–ª–µ–∫—Ü–∏—è: {result['collection']}")
    
    if result['processed_files']:
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file_path in result['processed_files']:
            print(f"   ‚Ä¢ {os.path.basename(file_path)}")
    
    if result['failed_files']:
        print(f"\n‚ùå –§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:")
        for file_path in result['failed_files']:
            print(f"   ‚Ä¢ {os.path.basename(file_path)}")

def main():
    parser = argparse.ArgumentParser(
        description="–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
    )
    parser.add_argument(
        "folder_path",
        help="–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"
    )
    parser.add_argument(
        "collection",
        help="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
    )
    parser.add_argument(
        "--extensions",
        nargs="+",
        default=[".pdf", ".doc", ".docx", ".txt"],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: .pdf .doc .docx .txt)"
    )
    parser.add_argument(
        "--info-only",
        action="store_true",
        help="–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–ø–∫–µ, –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏"
    )
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"
    )
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    if not os.path.exists(args.folder_path):
        print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {args.folder_path}")
        sys.exit(1)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–ø–∫–µ
    folder_info = get_folder_info(args.folder_path, args.extensions)
    print_folder_info(folder_info)
    
    if "error" in folder_info:
        sys.exit(1)
    
    if folder_info['total_files'] == 0:
        print(f"\n‚ö†Ô∏è  –í –ø–∞–ø–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏")
        print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(args.extensions)}")
        sys.exit(0)
    
    if args.info_only:
        print(f"\n‚ÑπÔ∏è  –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å.")
        sys.exit(0)
    
    if args.dry_run:
        print(f"\nüîç –†–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:")
        print(f"–ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ {folder_info['total_files']} —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é '{args.collection}'")
        print(f"–î–ª—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ —Ñ–ª–∞–≥–∞ --dry-run")
        sys.exit(0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GigaChat
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat...")
    if not test_embeddings():
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
        sys.exit(1)
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GigaChat —É—Å–ø–µ—à–Ω–æ")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é '{args.collection}'...")
    result = process_documents_from_folder(args.folder_path, args.collection, args.extensions)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print_upload_result(result)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    if result.get("success", False) and result.get("processed", 0) > 0:
        print(f"\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{args.collection}' –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:")
        collection_info = get_document_info(args.collection)
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {collection_info['total_documents']}")
        print(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å embeddings: {collection_info.get('embedding_model', 'GigaChat')}")
        
        if collection_info['documents']:
            print(f"   ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã:")
            for doc in collection_info['documents']:
                print(f"     - {os.path.basename(doc['source'])} ({doc['chunks']} —á–∞–Ω–∫–æ–≤)")

if __name__ == "__main__":
    main() 