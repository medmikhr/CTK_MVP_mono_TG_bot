#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å GigaChat API
"""

import os
import logging
import time
from dotenv import load_dotenv
from langchain_gigachat import GigaChat
from langchain.agents import tool
from langgraph.prebuilt import create_react_agent
from langgraph.checkpoint.memory import MemorySaver

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    gc_token = os.getenv('GIGACHAT_TOKEN')
    if gc_token:
        print("‚úÖ GIGACHAT_TOKEN –Ω–∞–π–¥–µ–Ω")
        print(f"   –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: {len(gc_token)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {gc_token[:10]}...")
    else:
        print("‚ùå GIGACHAT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    return True

def test_gigachat_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat...")
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        gc_token = os.getenv('GIGACHAT_TOKEN')
        if not gc_token:
            print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat
        print("   –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat...")
        llm = GigaChat(
            credentials=gc_token,
            model='GigaChat:latest',
            verify_ssl_certs=False,
            profanity_check=False
        )
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        print("   –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
        start_time = time.time()
        response = llm.invoke("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
        end_time = time.time()
        
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   –û—Ç–≤–µ—Ç: {response.content[:100]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_gigachat_with_tools():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GigaChat —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GigaChat —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏...")
    
    try:
        gc_token = os.getenv('GIGACHAT_TOKEN')
        llm = GigaChat(
            credentials=gc_token,
            model='GigaChat:latest',
            verify_ssl_certs=False,
            profanity_check=False
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        @tool
        def test_tool(query: str):
            """–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏."""
            return f"–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å: {query}"
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º
        print("   –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏...")
        tools = [test_tool]
        memory = MemorySaver()
        agent_executor = create_react_agent(llm, tools, checkpointer=memory)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
        test_query = "–ò—Å–ø–æ–ª—å–∑—É–π test_tool –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–æ—è—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"
        print(f"   –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {test_query}")
        
        start_time = time.time()
        config = {"configurable": {"thread_id": "test"}}
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞
        for event in agent_executor.stream(
            {"messages": [{"role": "user", "content": test_query}]},
            stream_mode="values",
            config=config,
        ):
            answer_message = event["messages"][-1]
            print(f"   –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞")
        
        end_time = time.time()
        
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏: {e}")
        print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        return False

def check_network_connectivity_alternative():
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ socket."""
    print("\nüîç –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ (—á–µ—Ä–µ–∑ socket)...")
    
    import socket
    
    try:
        # –°–æ–∑–¥–∞–µ–º socket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–æ—Ä—Ç—É 443 (HTTPS)
        result = sock.connect_ex(('gigachat.devices.sberbank.ru', 443))
        sock.close()
        
        if result == 0:
            print("‚úÖ –°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ—Ä—Ç 443 –¥–æ—Å—Ç—É–ø–µ–Ω)")
            return True
        else:
            print(f"‚ùå –ü–æ—Ä—Ç 443 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ –æ—à–∏–±–∫–∏: {result})")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def check_network_connectivity():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    import urllib.request
    import socket
    import ssl
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS
    try:
        socket.gethostbyname("gigachat.devices.sberbank.ru")
        print("‚úÖ DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å DNS: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤)
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç SSL –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        
        # –°–æ–∑–¥–∞–µ–º opener —Å –Ω–∞—à–∏–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        opener = urllib.request.build_opener(
            urllib.request.HTTPSHandler(context=ssl_context)
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        response = opener.open("https://gigachat.devices.sberbank.ru", timeout=10)
        print("‚úÖ HTTPS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GigaChat —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å HTTPS: {e}")
        print("   (–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ç—è—Ö)")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        return check_network_connectivity_alternative()

def test_real_tools():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞–º–∏."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
    
    try:
        from document_processor_langchain import PERSIST_DIR
        from embeddings_manager import get_local_huggingface_embeddings
        from langchain_chroma import Chroma
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è embeddings
        print("   –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è embeddings...")
        embeddings = get_local_huggingface_embeddings()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
        print("   –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â...")
        vector_stores = {
            "ctk": Chroma(collection_name="ctk", persist_directory=PERSIST_DIR, embedding_function=embeddings),
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        store = vector_stores["ctk"]
        count = store._collection.count()
        print(f"   –•—Ä–∞–Ω–∏–ª–∏—â–µ CTK: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        if count == 0:
            print("   ‚ö†Ô∏è  –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—É—Å—Ç–æ–µ - –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
            return False
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
        print("   –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...")
        docs = store.similarity_search("–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", k=1)
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –¢–µ—Å—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        print("   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ctk_retrieve_tool...")
        from langchain.agents import tool
        
        @tool
        def test_ctk_tool(query: str):
            """–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CTK —Ö—Ä–∞–Ω–∏–ª–∏—â–∞."""
            docs = store.similarity_search(query, k=2)
            return f"–ù–∞–π–¥–µ–Ω–æ {len(docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}"
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º
        from langchain_gigachat import GigaChat
        from langgraph.prebuilt import create_react_agent
        from langgraph.checkpoint.memory import MemorySaver
        
        gc_token = os.getenv('GIGACHAT_TOKEN')
        llm = GigaChat(
            credentials=gc_token,
            model='GigaChat:latest',
            verify_ssl_certs=False,
            profanity_check=False
        )
        
        tools = [test_ctk_tool]
        memory = MemorySaver()
        agent_executor = create_react_agent(llm, tools, checkpointer=memory)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
        test_query = "–ò—Å–ø–æ–ª—å–∑—É–π test_ctk_tool –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–æ—è—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"
        print(f"   –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {test_query}")
        
        start_time = time.time()
        config = {"configurable": {"thread_id": "test_real"}}
        
        for event in agent_executor.stream(
            {"messages": [{"role": "user", "content": test_query}]},
            stream_mode="values",
            config=config,
        ):
            answer_message = event["messages"][-1]
            print(f"   –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º")
        
        end_time = time.time()
        
        print(f"‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
        print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
        print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        return False

def test_real_ctk_tool():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π ctk_retrieve_tool –∏–∑ agent.py."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π ctk_retrieve_tool...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ agent.py
        from old_react_agent import ctk_retrieve_tool, vector_stores
        
        print("   –ò–º–ø–æ—Ä—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ agent.py...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ CTK
        ctk_store = vector_stores["ctk"]
        count = ctk_store._collection.count()
        print(f"   –•—Ä–∞–Ω–∏–ª–∏—â–µ CTK: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        if count == 0:
            print("   ‚ö†Ô∏è  –•—Ä–∞–Ω–∏–ª–∏—â–µ CTK –ø—É—Å—Ç–æ–µ")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é
        print("   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ctk_retrieve_tool –Ω–∞–ø—Ä—è–º—É—é...")
        test_query = "—Å–ª–æ–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"
        
        start_time = time.time()
        result = ctk_retrieve_tool.invoke(test_query)
        end_time = time.time()
        
        print(f"   ‚úÖ ctk_retrieve_tool —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {str(result)[:200]}...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ LangGraph –∞–≥–µ–Ω—Ç–∞
        print("   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ LangGraph –∞–≥–µ–Ω—Ç–∞...")
        from old_react_agent import agent_executor
        
        start_time = time.time()
        config = {"configurable": {"thread_id": "test_ctk_real"}}
        
        for event in agent_executor.stream(
            {"messages": [{"role": "user", "content": f"–ò—Å–ø–æ–ª—å–∑—É–π ctk_retrieve_tool –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {test_query}"}]},
            stream_mode="values",
            config=config,
        ):
            answer_message = event["messages"][-1]
            print(f"   –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω–æ–π ctk_retrieve_tool")
        
        end_time = time.time()
        
        print(f"‚úÖ –†–µ–∞–ª—å–Ω–∞—è ctk_retrieve_tool —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞!")
        print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–π ctk_retrieve_tool: {e}")
        print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    print("üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ GigaChat API")
    print("=" * 50)
    
    results = {}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    results['environment'] = check_environment()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    results['network'] = check_network_connectivity()
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat...")
    results['connection'] = test_gigachat_connection()
    
    # –¢–µ—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏...")
    results['tools'] = test_gigachat_with_tools()
    
    # –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
    results['real_tools'] = test_real_tools()
    
    # –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π ctk_retrieve_tool
    print("\n6Ô∏è‚É£ –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π ctk_retrieve_tool...")
    results['real_ctk_tool'] = test_real_ctk_tool()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    
    print(f"–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {'‚úÖ' if results['environment'] else '‚ùå'}")
    print(f"–°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ' if results['network'] else '‚ùå'}")
    print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GigaChat: {'‚úÖ' if results['connection'] else '‚ùå'}")
    print(f"–†–∞–±–æ—Ç–∞ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏: {'‚úÖ' if results['tools'] else '‚ùå'}")
    print(f"–†–µ–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {'‚úÖ' if results['real_tools'] else '‚ùå'}")
    print(f"–†–µ–∞–ª—å–Ω–∞—è ctk_retrieve_tool: {'‚úÖ' if results['real_ctk_tool'] else '‚ùå'}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if not results['environment']:
        print("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é GIGACHAT_TOKEN")
    
    if not results['network']:
        print("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GigaChat API")
        print("   –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ç—è—Ö SSL –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å")
        print("   –ï—Å–ª–∏ GigaChat —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ")
    
    if not results['connection']:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ GigaChat - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω")
    
    if not results['tools']:
        if results['connection']:
            print("‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏, –Ω–æ –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å agent_simple.py")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
    
    if not results['real_tools']:
        if results['connection'] and results['tools']:
            print("‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏, –Ω–æ –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å agent_simple.py")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
    
    if not results['real_ctk_tool']:
        if results['connection'] and results['tools'] and results['real_tools']:
            print("‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–∞–ª—å–Ω–æ–π ctk_retrieve_tool, –Ω–æ –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å agent_simple.py")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é ctk_retrieve_tool")
    
    if all(results.values()):
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("   –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–π –∏–∑ –∞–≥–µ–Ω—Ç–æ–≤:")
        print("   - agent.py (–ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)")
        print("   - agent_gigachat.py (—Å GigaChat embeddings)")
        print("   - agent_simple.py (–ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º)")
    elif results['connection'] and results['tools'] and results['real_tools'] and results['real_ctk_tool']:
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
        print("   –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–π –∏–∑ –∞–≥–µ–Ω—Ç–æ–≤")
        print("   (–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã)")
    
    print("\n" + "=" * 50)
    print("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main() 