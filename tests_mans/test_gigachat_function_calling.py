#!/usr/bin/env python3
"""
–¢–µ—Å—Ç GigaChat Function Calling - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –°–±–µ—Ä–∞
https://developers.sber.ru/docs/ru/gigachat/guides/function-calling
"""

import os
import logging
from typing import List, Dict, Any
from dotenv import load_dotenv
from langchain_gigachat import GigaChat
from langchain_core.messages import AIMessage, HumanMessage, SystemMessage, FunctionMessage
from langchain_gigachat.tools.giga_tool import giga_tool
from pydantic import BaseModel, Field
import time

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –¢–µ—Å—Ç–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
class WeatherResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã."""
    temperature: str = Field(description="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
    condition: str = Field(description="–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã")
    location: str = Field(description="–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")

class CalculatorResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è."""
    result: float = Field(description="–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")
    operation: str = Field(description="–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")

def test_gigachat_function_calling():
    """–¢–µ—Å—Ç GigaChat function calling —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –°–±–µ—Ä–∞."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GigaChat Function Calling")
    print("=" * 50)
    
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat
        print("\n1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat...")
        gc_auth = os.getenv('GIGACHAT_TOKEN')
        if not gc_auth:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω GigaChat")
        
        llm = GigaChat(
            credentials=gc_auth,
            model='GigaChat:latest',
            verify_ssl_certs=False,
            profanity_check=False
        )
        print("‚úÖ GigaChat –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Å giga_tool
        print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Å giga_tool...")
        
        # –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–≥–æ–¥—ã
        weather_examples = [
            {
                "request": "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?",
                "params": {"location": "–ú–æ—Å–∫–≤–∞"}
            },
            {
                "request": "–ü–æ–≥–æ–¥–∞ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ",
                "params": {"location": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"}
            }
        ]
        
        # –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        calculator_examples = [
            {
                "request": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2 + 2?",
                "params": {"a": 2, "b": 2, "operation": "add"}
            },
            {
                "request": "–£–º–Ω–æ–∂—å 5 –Ω–∞ 3",
                "params": {"a": 5, "b": 3, "operation": "multiply"}
            }
        ]
        
        @giga_tool(few_shot_examples=weather_examples)
        def get_weather(location: str = Field(description="–ì–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã")) -> WeatherResult:
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ."""
            # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
            return WeatherResult(
                temperature="20¬∞C",
                condition="–°–æ–ª–Ω–µ—á–Ω–æ",
                location=location
            )
        
        @giga_tool(few_shot_examples=calculator_examples)
        def calculate(a: float = Field(description="–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ"), 
                     b: float = Field(description="–í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ"),
                     operation: str = Field(description="–û–ø–µ—Ä–∞—Ü–∏—è: add, subtract, multiply, divide")) -> CalculatorResult:
            """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
            if operation == "add":
                result = a + b
            elif operation == "subtract":
                result = a - b
            elif operation == "multiply":
                result = a * b
            elif operation == "divide":
                result = a / b if b != 0 else 0
            else:
                result = 0
            
            return CalculatorResult(
                result=result,
                operation=operation
            )
        
        print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã —Å giga_tool")
        
        # 3. –ü—Ä–∏–≤—è–∑–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –∫ LLM
        print("\n3Ô∏è‚É£ –ü—Ä–∏–≤—è–∑–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –∫ LLM...")
        llm_with_functions = llm.bind_tools([get_weather, calculate])
        print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ LLM")
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–æ–≤
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π...")
        
        # –¢–µ—Å—Ç 1: –ü–æ–≥–æ–¥–∞
        print("\nüå§Ô∏è –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–≥–æ–¥—ã:")
        messages = [
            SystemMessage(content="–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É."),
            HumanMessage(content="–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?")
        ]
        
        start_time = time.time()
        response = llm_with_functions.invoke(messages)
        end_time = time.time()
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {end_time - start_time:.2f}—Å")
        print(f"ü§ñ –û—Ç–≤–µ—Ç: {response.content}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
        if hasattr(response, 'tool_calls') and response.tool_calls:
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞!")
            for tool_call in response.tool_calls:
                print(f"   üìû –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: {tool_call['name']}")
                print(f"   üìù –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {tool_call['args']}")
        else:
            print("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –Ω–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞")
        
        # –¢–µ—Å—Ç 2: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        print("\nüßÆ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:")
        messages = [
            SystemMessage(content="–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É."),
            HumanMessage(content="–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 15 —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ 7?")
        ]
        
        start_time = time.time()
        response = llm_with_functions.invoke(messages)
        end_time = time.time()
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {end_time - start_time:.2f}—Å")
        print(f"ü§ñ –û—Ç–≤–µ—Ç: {response.content}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
        if hasattr(response, 'tool_calls') and response.tool_calls:
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞!")
            for tool_call in response.tool_calls:
                print(f"   üìû –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: {tool_call['name']}")
                print(f"   üìù –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {tool_call['args']}")
        else:
            print("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –Ω–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞")
        
        # 5. –¢–µ—Å—Ç —Å –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π tool_calls
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π tool_calls...")
        
        def process_with_tool_calls(messages):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–∑–æ–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–π."""
            while True:
                response = llm_with_functions.invoke(messages)
                # –ï—Å–ª–∏ –µ—Å—Ç—å tool_calls, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
                if hasattr(response, 'tool_calls') and response.tool_calls:
                    for tool_call in response.tool_calls:
                        func_name = tool_call['name']
                        args = tool_call['args']
                        print(f"üîß –í—ã–ø–æ–ª–Ω—è—é —Ñ—É–Ω–∫—Ü–∏—é {func_name} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ {args}")
                        if func_name == "get_weather":
                            result = get_weather.invoke(args)
                        elif func_name == "calculate":
                            result = calculate.invoke(args)
                        else:
                            result = None
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
                        messages.append(FunctionMessage(name=func_name, content=result.json()))
                else:
                    return response.content
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print("\nüîÑ –¢–µ—Å—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π:")
        messages = [
            SystemMessage(content="–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ñ—É–Ω–∫—Ü–∏—è–º. –ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ."),
            HumanMessage(content="–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ –∏ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 10 + 5?")
        ]
        
        start_time = time.time()
        result = process_with_tool_calls(messages)
        end_time = time.time()
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {end_time - start_time:.2f}—Å")
        print(f"ü§ñ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {result}")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_our_agent_implementation():
    """–¢–µ—Å—Ç –Ω–∞—à–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞."""
    print("\n" + "=" * 60)
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞")
    print("=" * 60)
    
    try:
        from class_functions_agent import GigaChatFunctionsAgent
        
        print("\n1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞...")
        agent = GigaChatFunctionsAgent()
        print("‚úÖ –ê–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞...")
        test_query = "–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏"
        
        start_time = time.time()
        response = agent.process_query(test_query, thread_id="test")
        end_time = time.time()
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {end_time - start_time:.2f}—Å")
        print(f"ü§ñ –û—Ç–≤–µ—Ç: {response[:200]}...")
        
        print("\n‚úÖ –¢–µ—Å—Ç –Ω–∞—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ GigaChat Function Calling")
    print("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.sber.ru/docs/ru/gigachat/guides/function-calling")
    
    # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ function calling
    success1 = test_gigachat_function_calling()
    
    # –¢–µ—Å—Ç –Ω–∞—à–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    success2 = test_our_agent_implementation()
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    print(f"‚úÖ –ë–∞–∑–æ–≤—ã–π function calling: {'–ü–†–û–ô–î–ï–ù' if success1 else '–ü–†–û–í–ê–õ–ï–ù'}")
    print(f"‚úÖ –ù–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞: {'–ü–†–û–ô–î–ï–ù' if success2 else '–ü–†–û–í–ê–õ–ï–ù'}")
    
    if success1 and success2:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –°–±–µ—Ä–∞.")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é.") 