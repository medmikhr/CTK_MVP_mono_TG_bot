#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
"""

import os
import time
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_simple_tool_calls():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
    print("üîç –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    print("=" * 50)
    
    try:
        from old_react_agent import dama_retrieve_tool, ctk_retrieve_tool, sbf_retrieve_tool
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_cases = [
            ("dama_retrieve_tool", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏", dama_retrieve_tool),
            ("ctk_retrieve_tool", "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", ctk_retrieve_tool),
            ("sbf_retrieve_tool", "—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥", sbf_retrieve_tool),
        ]
        
        for tool_name, query, tool_func in test_cases:
            print(f"\nüîß –¢–µ—Å—Ç {tool_name}: '{query}'")
            print("-" * 30)
            
            start_time = time.time()
            
            try:
                result = tool_func.invoke(query)
                end_time = time.time()
                
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {end_time - start_time:.2f}—Å")
                print(f"üìÑ –¢–∏–ø: {type(result).__name__}")
                
                if isinstance(result, str):
                    print(f"üìù –î–ª–∏–Ω–∞: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"üìÑ –ù–∞—á–∞–ª–æ: {result[:200]}...")
                else:
                    print(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {str(result)[:200]}...")
                    
            except Exception as e:
                end_time = time.time()
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞ {end_time - start_time:.2f}—Å: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def test_agent_with_simple_query():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º."""
    print("\nü§ñ –¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ —Å –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º")
    print("=" * 50)
    
    try:
        from old_react_agent import agent_executor
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        simple_query = "–ß—Ç–æ —Ç–∞–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏?"
        
        print(f"–ó–∞–ø—Ä–æ—Å: '{simple_query}'")
        print("-" * 30)
        
        start_time = time.time()
        config = {"configurable": {"thread_id": "simple_test"}}
        
        event_count = 0
        for event in agent_executor.stream(
            {"messages": [{"role": "user", "content": simple_query}]},
            stream_mode="values",
            config=config,
        ):
            event_count += 1
            print(f"\nüìã –°–æ–±—ã—Ç–∏–µ #{event_count}:")
            
            if "messages" in event and event["messages"]:
                messages = event["messages"]
                for i, message in enumerate(messages):
                    if hasattr(message, 'content'):
                        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: {message.content[:200]}...")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                        if hasattr(message, 'tool_calls') and message.tool_calls:
                            print(f"   üîß –í—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(message.tool_calls)}")
                            for tool_call in message.tool_calls:
                                print(f"      - {tool_call}")
        
        end_time = time.time()
        print(f"\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {end_time - start_time:.2f}—Å ({event_count} —Å–æ–±—ã—Ç–∏–π)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
    direct_success = test_simple_tool_calls()
    
    # –¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞...")
    agent_success = test_agent_with_simple_query()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("=" * 50)
    
    print(f"–ü—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã: {'‚úÖ' if direct_success else '‚ùå'}")
    print(f"–ê–≥–µ–Ω—Ç: {'‚úÖ' if agent_success else '‚ùå'}")
    
    if direct_success and agent_success:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
    else:
        print("\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏")

if __name__ == "__main__":
    main() 