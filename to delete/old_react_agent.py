import os
import logging
from typing import List
from dotenv import load_dotenv
from langchain_gigachat import GigaChat
from langchain_chroma import Chroma
from langgraph.prebuilt import create_react_agent
from langgraph.checkpoint.memory import MemorySaver
from langchain.agents import tool
from document_processor_langchain import PERSIST_DIR
from embeddings_manager import get_local_huggingface_embeddings
import time
import sys

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# GIGACHAT_TOKEN = N2ZiYzFhNDktYzMzOC00ZGEwLTg2ODktN2U1OTZlNjNmNTZiOjY1M2U0ZmY0LTAxOTYtNGFhZS1hMjBhLThhNTIzMTczNGZhZQ== –î–º–∏—Ç—Ä–∏–π
# GIGACHAT_TOKEN = NjVlYWZhODAtZmYwZC00ODUwLTgwMDQtOGUwZjc0OWM1MDJjOmRjZjNhYWJkLTM3OTQtNDRlMC1hZjBkLTNiMmZlNTgzNTg1NA== –°–µ—Ä–≥–µ–π
# GIGACHAT_TOKEN = M2Y1Y2VhYzItZGQ1ZS00MWI5LWFiMDMtY2JmNzFkNDY1N2RiOjU1YmJhNDRjLTRlYTAtNGYzZC04ZDdmLWE3NzBmNzZkNjA2Mg== –î–µ–Ω–∏—Å

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
GC_AUTH = os.getenv('GIGACHAT_TOKEN')
if not GC_AUTH:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω GigaChat –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat
llm = GigaChat(
    credentials=GC_AUTH,
    model='GigaChat:latest',
    verify_ssl_certs=False,
    profanity_check=False
)

# –ü–æ–ª—É—á–µ–Ω–∏–µ embeddings –∏–∑ –æ–±—â–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
embeddings = get_local_huggingface_embeddings()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
vector_stores = {
    "dama": Chroma(collection_name="dama", persist_directory=PERSIST_DIR, embedding_function=embeddings),
    "ctk": Chroma(collection_name="ctk", persist_directory=PERSIST_DIR, embedding_function=embeddings),
    "sbf": Chroma(collection_name="sbf", persist_directory=PERSIST_DIR, embedding_function=embeddings)
}

def search_documents(store: Chroma, query: str, k: int = 5) -> str:
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ."""
    try:
        retrieved_docs = store.similarity_search(query, k=k)
        serialized = "\n\n".join(
            (f"Source: {doc.metadata}\n" f"Content: {doc.page_content}")
            for doc in retrieved_docs
        )
        return serialized
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}"

@tool
def dama_retrieve_tool(query: str):
    """–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏, 
    —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞—Ö DAMA, –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏, —Ä–æ–ª—è—Ö –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏.
    –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Data Management Body Of Knowledge (DMBOK)."""
    return search_documents(vector_stores["dama"], query)

@tool
def ctk_retrieve_tool(query: str):
    """–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏—è—Ö, 
    –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å–∏—Å—Ç–µ–º, –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞—Ö –∏ –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö –¶–¢–ö.
    –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¶–µ–Ω—Ç—Ä–∞ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–∞."""
    return search_documents(vector_stores["ctk"], query)

@tool
def sbf_retrieve_tool(query: str):
    """–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö, 
    –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö –°–±–µ—Ä–ë–∞–Ω–∫ –§–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞, –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
    –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –°–±–µ—Ä–ë–∞–Ω–∫ –§–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞."""
    return search_documents(vector_stores["sbf"], query)

tools_dict = [dama_retrieve_tool, ctk_retrieve_tool, sbf_retrieve_tool]
memory = MemorySaver()
agent_executor = create_react_agent(llm, tools_dict, checkpointer=memory)

def agent_ask(user_id, input_message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        config = {"configurable": {"thread_id": user_id}}
        event_count = 0
        
        print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: '{input_message}'")
        print("=" * 50)
        
        for event in agent_executor.stream(
            {"messages": [{"role": "user", "content": input_message}]},
            stream_mode="values",
            config=config,
        ):
            event_count += 1
            print(f"\nüìã –°–æ–±—ã—Ç–∏–µ #{event_count}:")
            
            # –í—ã–≤–æ–¥–∏–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –∏ –∫–ª—é—á–∏
            print(f"   –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {type(event).__name__}")
            print(f"   –ö–ª—é—á–∏ —Å–æ–±—ã—Ç–∏—è: {list(event.keys())}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            if "messages" in event and event["messages"]:
                messages = event["messages"]
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
                
                for i, message in enumerate(messages):
                    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}:")
                    print(f"      –¢–∏–ø: {type(message).__name__}")
                    
                    if hasattr(message, 'content'):
                        content = message.content
                        print(f"      –ö–æ–Ω—Ç–µ–Ω—Ç: {content[:200]}...")
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–≥–µ–Ω—Ç–∞ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
                        if hasattr(message, 'tool_calls') and message.tool_calls:
                            print(f"      üîß –í—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(message.tool_calls)}")
                            for j, tool_call in enumerate(message.tool_calls):
                                print(f"         –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {j+1}: {tool_call}")
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                    if hasattr(message, 'additional_kwargs'):
                        additional = message.additional_kwargs
                        if additional:
                            print(f"      –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {additional}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º tool_calls
            if "tool_calls" in event:
                tool_calls = event["tool_calls"]
                print(f"   üîß –í—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tool_calls)}")
                for i, tool_call in enumerate(tool_calls):
                    print(f"      –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {i+1}: {tool_call}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º tool_results
            if "tool_results" in event:
                tool_results = event["tool_results"]
                print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tool_results)}")
                for i, result in enumerate(tool_results):
                    print(f"      –†–µ–∑—É–ª—å—Ç–∞—Ç {i+1}: {str(result)[:200]}...")
            
            # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if "messages" in event and event["messages"]:
                last_message = event["messages"][-1]
                if hasattr(last_message, 'content') and event_count > 1:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ (–≤—Ö–æ–¥–Ω–æ–π –∑–∞–ø—Ä–æ—Å)
                    print(f"\nüí¨ –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞:")
                    print(f"{last_message.content}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if "messages" in event and event["messages"]:
            return event["messages"][-1]
        else:
            return "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        try:
            logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
            simple_response = llm.invoke(input_message)
            print(f"\n=== –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç (–±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤) ===")
            print(simple_response.content)
            return simple_response
        except Exception as simple_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ: {simple_error}")
            error_message = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            print(f"\n‚ùå {error_message}")
            return error_message

def test_vector_stores():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â."""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â...")
    
    try:
        for store_name, store in vector_stores.items():
            logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ {store_name}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            count = store._collection.count()
            logger.info(f"–•—Ä–∞–Ω–∏–ª–∏—â–µ {store_name}: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
            # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
            if count > 0:
                test_query = "—Ç–µ—Å—Ç"
                docs = store.similarity_search(test_query, k=1)
                logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –≤ {store_name} —É—Å–ø–µ—à–µ–Ω")
            else:
                logger.warning(f"–•—Ä–∞–Ω–∏–ª–∏—â–µ {store_name} –ø—É—Å—Ç–æ–µ")
        
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â: {e}")
        return False

def test_ctk_tool_before_startup():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ctk_retrieve_tool –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ctk_retrieve_tool –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º...")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ CTK
        ctk_store = vector_stores["ctk"]
        count = ctk_store._collection.count()
        print(f"–•—Ä–∞–Ω–∏–ª–∏—â–µ CTK: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        if count == 0:
            print("‚ö†Ô∏è  –•—Ä–∞–Ω–∏–ª–∏—â–µ CTK –ø—É—Å—Ç–æ–µ - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
            return False
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_queries = [
            "—Å–ª–æ–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
            "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è"
        ]
        
        for i, query in enumerate(test_queries, 1):
            print(f"\nüîç –¢–µ—Å—Ç #{i}: '{query}'")
            print("-" * 30)
            
            start_time = time.time()
            
            try:
                # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                result = ctk_retrieve_tool.invoke(query)
                end_time = time.time()
                
                print(f"‚úÖ –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤: {end_time - start_time:.2f}—Å")
                print(f"üìÑ –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result).__name__}")
                
                # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if isinstance(result, str):
                    print(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {result[:200]}...")
                elif isinstance(result, tuple):
                    print(f"üìù –ö–æ—Ä—Ç–µ–∂: {len(result)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    for j, item in enumerate(result):
                        print(f"   –≠–ª–µ–º–µ–Ω—Ç {j+1}: {str(item)[:100]}...")
                else:
                    print(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {str(result)[:200]}...")
                
                # –¢–µ—Å—Ç —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞
                print(f"\nüîç –¢–µ—Å—Ç —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞...")
                agent_start_time = time.time()
                
                config = {"configurable": {"thread_id": f"startup_test_{i}"}}
                event_count = 0
                
                for event in agent_executor.stream(
                    {"messages": [{"role": "user", "content": f"–ò—Å–ø–æ–ª—å–∑—É–π ctk_retrieve_tool –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {query}"}]},
                    stream_mode="values",
                    config=config,
                ):
                    event_count += 1
                    print(f"   üìã –°–æ–±—ã—Ç–∏–µ #{event_count}:")
                    
                    # –í—ã–≤–æ–¥–∏–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
                    if "messages" in event:
                        messages = event["messages"]
                        if messages:
                            last_message = messages[-1]
                            print(f"      –¢–∏–ø: {type(last_message).__name__}")
                            
                            # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–≥–µ–Ω—Ç–∞
                            if hasattr(last_message, 'content'):
                                print(f"      –ö–æ–Ω—Ç–µ–Ω—Ç: {last_message.content[:100]}...")
                    
                    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∫–ª—é—á–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    print(f"      –ö–ª—é—á–∏ —Å–æ–±—ã—Ç–∏—è: {list(event.keys())}")
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å tool_calls
                    if "tool_calls" in event:
                        tool_calls = event["tool_calls"]
                        print(f"      üîß –í—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tool_calls)}")
                        for j, tool_call in enumerate(tool_calls):
                            print(f"         –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {j+1}: {tool_call}")
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å tool_results
                    if "tool_results" in event:
                        tool_results = event["tool_results"]
                        print(f"      üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tool_results)}")
                        for j, result in enumerate(tool_results):
                            print(f"         –†–µ–∑—É–ª—å—Ç–∞—Ç {j+1}: {str(result)[:100]}...")
                
                agent_end_time = time.time()
                print(f"‚úÖ –ê–≥–µ–Ω—Ç: {agent_end_time - agent_start_time:.2f}—Å ({event_count} —Å–æ–±—ã—Ç–∏–π)")
                
            except Exception as e:
                end_time = time.time()
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞ {end_time - start_time:.2f}—Å: {e}")
                print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                return False
        
        print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ctk_retrieve_tool –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        return False

def test_gigachat_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat."""
    try:
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç LLM
        test_response = llm.invoke("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
        logger.info("–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat —É—Å–ø–µ—à–µ–Ω")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ GigaChat: {e}")
        return False

def test_agent_tools_registration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –∞–≥–µ–Ω—Ç–µ."""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –∞–≥–µ–Ω—Ç–µ...")
    print("=" * 50)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        available_tools = agent_executor.get_tools()
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {len(available_tools)}")
        
        for i, tool in enumerate(available_tools, 1):
            print(f"   {i}. {tool.name}: {tool.description[:100]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
        tool_names = [tool.name for tool in available_tools]
        expected_tools = ["dama_retrieve_tool", "ctk_retrieve_tool", "sbf_retrieve_tool"]
        
        missing_tools = [tool for tool in expected_tools if tool not in tool_names]
        
        if missing_tools:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {missing_tools}")
            return False
        else:
            print("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
        return False

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ –∑–∞–ø—É—Å–∫–∞
    skip_tests = "--skip-tests" in sys.argv or "--fast" in sys.argv
    
    if skip_tests:
        print("‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ)")
    else:
        print("üîç –ó–∞–ø—É—Å–∫ —Å –ø–æ–ª–Ω—ã–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat
    if not test_gigachat_connection():
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ GigaChat")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        exit(1)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
    if not test_vector_stores():
        print("‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞–º–∏")
        print("–í–æ–∑–º–æ–∂–Ω–æ, —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø—É—Å—Ç—ã–µ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–Ω–æ–≤–∞")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ctk_retrieve_tool (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ)
    if not skip_tests:
        if not test_ctk_tool_before_startup():
            print("‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å ctk_retrieve_tool")
            print("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å agent_simple.py")
    else:
        print("‚è≠Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ctk_retrieve_tool –ø—Ä–æ–ø—É—â–µ–Ω–æ")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    if not test_agent_tools_registration():
        print("‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        print("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å agent_simple.py")
    
    print("\n" + "=" * 50)
    print("‚úÖ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("–í–≤–µ–¥–∏—Ç–µ 'exit', 'quit' –∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    print("–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("=" * 50)
    
    try:
        while True:
            user_input = input("–°–ø—Ä–∞—à–∏–≤–∞–π: ")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ –≤—ã—Ö–æ–¥–∞
            if user_input.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥', 'q']:
                print("–í—ã—Ö–æ–¥ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                break
            
            agent_ask(1, user_input)
    except KeyboardInterrupt:
        print("\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
        print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except EOFError:
        print("\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (EOF)")
        print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
